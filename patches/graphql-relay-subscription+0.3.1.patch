diff --git a/node_modules/graphql-relay-subscription/lib/index.d.ts b/node_modules/graphql-relay-subscription/lib/index.d.ts
index 69e34d4..2e6ff45 100644
--- a/node_modules/graphql-relay-subscription/lib/index.d.ts
+++ b/node_modules/graphql-relay-subscription/lib/index.d.ts
@@ -1,4 +1,5 @@
-import type { GraphQLFieldConfig, GraphQLFieldConfigMap, GraphQLInputFieldConfigMap, GraphQLResolveInfo, Thunk } from 'graphql';
+import { GraphQLInputFieldConfig } from 'graphql';
+import type { GraphQLFieldConfig, GraphQLResolveInfo, ThunkObjMap } from 'graphql';
 export interface InputArgs<TInput> {
     input: TInput & {
         clientSubscriptionId?: string | null | undefined;
@@ -6,8 +7,8 @@ export interface InputArgs<TInput> {
 }
 export interface SubscriptionConfig<TSource, TContext, TInput> extends Omit<GraphQLFieldConfig<TSource, TContext, InputArgs<TInput>>, 'type' | 'args' | 'subscribe' | 'resolve'> {
     name: string;
-    inputFields?: Thunk<GraphQLInputFieldConfigMap>;
-    outputFields?: Thunk<GraphQLFieldConfigMap<TSource, TContext>>;
+    inputFields?: ThunkObjMap<GraphQLInputFieldConfig>;
+    outputFields?: ThunkObjMap<GraphQLFieldConfig<TSource, TContext>>;
     subscribe?: (input: TInput, context: TContext, info: GraphQLResolveInfo) => any;
     getPayload?: (obj: TSource, input: TInput, context: TContext, info: GraphQLResolveInfo) => Promise<any> | any;
 }
diff --git a/node_modules/graphql-relay-subscription/lib/index.js b/node_modules/graphql-relay-subscription/lib/index.js
index b8e20e6..cc126d1 100644
--- a/node_modules/graphql-relay-subscription/lib/index.js
+++ b/node_modules/graphql-relay-subscription/lib/index.js
@@ -5,10 +5,6 @@ exports.subscriptionWithClientId = subscriptionWithClientId;

 var _graphql = require("graphql");

-function resolveThunk(thunk) {
-  return thunk instanceof Function ? thunk() : thunk;
-}
-
 function defaultGetPayload(obj) {
   return obj;
 }
@@ -23,7 +19,7 @@ function subscriptionWithClientId({
 }) {
   const inputType = new _graphql.GraphQLInputObjectType({
     name: `${name}Input`,
-    fields: () => ({ ...resolveThunk(inputFields),
+    fields: () => ({ ...(0, _graphql.resolveObjMapThunk)(inputFields || {}),
       clientSubscriptionId: {
         type: _graphql.GraphQLString
       }
@@ -31,7 +27,7 @@ function subscriptionWithClientId({
   });
   const outputType = new _graphql.GraphQLObjectType({
     name: `${name}Payload`,
-    fields: () => ({ ...resolveThunk(outputFields),
+    fields: () => ({ ...(0, _graphql.resolveObjMapThunk)(outputFields || {}),
       clientSubscriptionId: {
         type: _graphql.GraphQLString
       }
@@ -41,7 +37,7 @@ function subscriptionWithClientId({
     type: outputType,
     args: {
       input: {
-        type: (0, _graphql.GraphQLNonNull)(inputType)
+        type: new _graphql.GraphQLNonNull(inputType)
       }
     },
     subscribe: subscribe && ((_obj, {
